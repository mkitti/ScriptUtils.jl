var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ScriptUtils","category":"page"},{"location":"#ScriptUtils","page":"Home","title":"ScriptUtils","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ScriptUtils.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ScriptUtils]","category":"page"},{"location":"#ScriptUtils.ScriptUtils","page":"Home","title":"ScriptUtils.ScriptUtils","text":"ScriptUtils\n\nUtility package for building scripts that loads a precompiled package.\n\nThe main concept is to enable small scripts that:\n\nActivate the package environment in which they are contained.\nLoad the package\nExecute a main function on __init__\n\nImportantly, the main function will not be executed on module initialization when loaded as a library from another package.\n\nInstallation\n\nTo use this package, add ScriptUtils both to your default environment (e.g. v.1.9), and your project package environment (e.g. Echo.jl as below).\n\nusing Pkg\nPkg.activate(\"/path/to/your/package\")\nPkg.add(\"https://github.com/mkitti/ScriptUtils.jl\")\nPkg.activate() # activate the default module\nPkg.add(\"https://github.com/mkitti/ScriptUtils.jl\")\n\nExample\n\nFor example, we will create an Echo.jl package that can be run with an echo.jl script.\n\nThe Echo.jl package has the following layout.\n\n[drwxrwxr-x]  Echo.jl\n├── [-rw-rw-r--]  Manifest.toml\n├── [-rw-rw-r--]  Project.toml\n├── [drwxrwxr-x]  scripts\n│   └── [-rwxrwxr-x]  echo.jl\n└── [drwxrwxr-x]  src\n    ├── [-rw-rw-r--]  Echo.jl\n\n2 directories, 4 files\n\nEcho.jl/scripts/echo.jl has the following contents.\n\n#!/bin/env julia\nusing ScriptUtils\n@activate_dir \"..\"\nusing Echo\n\nThe @activate_dir macro finds the package environment, Echo.jl in this example, and then activates the environment via Pkg.\n\nEcho.jl/src/Echo.jl is a main package file and appears as follows.\n\nmodule Echo\n    using ScriptUtils\n    @default_init()\n    main(args=ARGS) = echo(args)\n    echo(args) = println(join(args, \" \"))\nend\n\nThe minimalist Project.toml declares ScriptUtils as a dependency.\n\nname = \"Echo\"\nuuid = \"594283f3-b8da-40eb-8bd5-2e27980f0e39\"\n\n[deps]\nScriptUtils = \"f569facd-b734-495c-9df5-0762dee8e069\"\n\nThe script file can then be symlinked into the user's path (e.g. ~/bin) and invoked as an executable script from any location.\n\n$ ln -s ~/src/Echo.jl/scripts/echo.jl ~/bin/\n\n$ echo.jl This is a test\n  Activating project at `~/src/Echo.jl`\nThis is a test\n\n# The package can still be loaded as a library and main will not run.\n$ julia --project=Echo.jl -e 'using Echo; Echo.echo([\"Hello\"])'\nHello\n\nExtended Help\n\n@default_init macro\n\nThe @default_init() macro declares the function __init__ such that if the PROGRAM_FILE is echo.jl, the lower case version of file name, then main(ARGS) is run.\n\nEcho.jl/src/Echo.jl can be expanded out if you would prefer to define your own __init__:\n\nmodule Echo\n    using ScriptUtils\n    __init__() = ismain(@script) ? main(ARGS) : nothing\n    main(args=ARGS) = echo(args)\n    echo(args) = println(join(args, \" \"))\nend\n\n@script macro\n\nAbove, the @script macro locates a script file located in the scripts directory. The default is the lowercase version of the calling file. The name of the file can also be specified as an argument as below.\n\njulia> @script(\"somefilename\")\n\"~/src/Echo.jl/scripts/somefilename\"\n\n\n\n\n\n","category":"module"},{"location":"#ScriptUtils.activate_dir","page":"Home","title":"ScriptUtils.activate_dir","text":"activate_dir(relative_dir, script_file, always_quiet=false, popq=true)\n\nSupports the @activate_dir macro.\n\n\n\n\n\n","category":"function"},{"location":"#ScriptUtils.ismain-Tuple{Any}","page":"Home","title":"ScriptUtils.ismain","text":"ismain(executable)\n\nReturn true if the file specified by executable is equal to PROGRAM_FILE, resolving absolute paths and symbolic links.\n\n\n\n\n\n","category":"method"},{"location":"#ScriptUtils.resolve_links-Tuple{Any}","page":"Home","title":"ScriptUtils.resolve_links","text":"resolve_links(path)\n\nRecursively resolve symbol links.\n\nSee also islink and readlink.\n\n\n\n\n\n","category":"method"},{"location":"#ScriptUtils.@activate_and_use","page":"Home","title":"ScriptUtils.@activate_and_use","text":"@activate_and_use(relative_dir=\"..\", always_quiet=false, popq=true)\n\nActivate a project environment directory relative to the current file and use the associated package.\n\nSee @activate_dir for details on the arguments.\n\nIn addition to activating the environment, this macro will import the package using Base.require. If importing fails, then the macro will use Pkg.instantiate() before trying to import the package again.\n\n\n\n\n\n","category":"macro"},{"location":"#ScriptUtils.@activate_dir","page":"Home","title":"ScriptUtils.@activate_dir","text":"@activate_dir(relative_directory=\"..\", always_quiet=false, popq=true))\n\nActivate a project environment directory relative to the current file.\n\nThe default is to activate the parent directory of the directory where the file is located. If the script is located in the same folder as Project.toml, then specify \".\" as the first argument.\n\nPkg.activate will print some text default to stderr by default about activating an environment. To suppress this output add a -q as the first argument. This -q will be removed from ARGS unless popq is false.\n\nThe always_quiet positional argument will be always suppress Pkg.activate is set to true. The -q argument will not be used.\n\n\n\n\n\n","category":"macro"},{"location":"#ScriptUtils.@default_init","page":"Home","title":"ScriptUtils.@default_init","text":"@default_init(script_file_absolute_path = nothing)\n\nDefine a __init__ function that will call main(ARGS) if a script file with the given absolute path is the PROGRAM_FILE.\n\nThe default script file is lowercased name of the module with \".jl\" appended in the scripts subfolder of the grandparent directory\n\nFor example, if called from the file \"Echo.jl/src/Echo.jl\" then default script file will be \"Echo.jl/script/echo.jl\".\n\n\n\n\n\n","category":"macro"},{"location":"#ScriptUtils.@script","page":"Home","title":"ScriptUtils.@script","text":"@script(filename)\n\nReturn the absolute path of a script file defaulting to scripts subdirectory of the package.\n\n\n\n\n\n","category":"macro"}]
}
